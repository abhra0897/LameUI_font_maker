#! /bin/python3

import json
import os
from PIL import Image, ImageOps
import sys
from operator import itemgetter
import re

# Creates a valid variable name from a string
# Taken from: https://stackoverflow.com/a/3305731
def clean(varStr): return re.sub('\W|^(?=\d)','_', varStr)

#returns tuple (height, width, payload)
#Serialization order is left-to-right, top-to-bottom
def make_image_array(img_data, bpp):
    if img_data.mode not in ["RGB", "RGBA"]:
        print("ERROR. Only RGB and RGBA mode images are supported. Detected mode: %s" %img_data.mode)
        sys.exit(-1)
    width, height = img_data.size
    print("Processing file %s color depth is %s, width %d, height %d" % (file_path, img_data.mode, width, height))

    payload = []
    # FUCK
    for y in range(0, height):
        bit_list = [0] * 8
        bit_index = 0
        for x in range(0, width):
            pixel = img_data.getpixel((x,y))
            if bpp == 1:
                pixel = round((pixel[0] + pixel[1] + pixel[2]) / 3)
                # Inverted by default. Best for icons/symbols
                if pixel < 127:
                    bit_list[bit_index] = 1
                bit_index += 1
                if bit_index == 8:
                    byte = 0
                    for bit in bit_list:
                        byte = (byte << 1) | bit
                    payload.append(byte)
                    bit_index = 0
                    bit_list = [0] * 8

            elif bpp == 8:
                byte = round((pixel[0] + pixel[1] + pixel[2]) / 3)
                payload.append(byte)
            
            elif bpp == 16:
                # 1. Convert RGB888 to RGB565
                # 2. Break RGB565 to 2 bytes (high and low)
                # 3. Store high byte first, then low byte
                low_byte = 0
                high_byte = 0
                rgb565 = ((int(pixel[0] / 255 * 31) << 11) | (int(pixel[1] / 255 * 63) << 5) | (int(pixel[2] / 255 * 31)))
                high_byte = rgb565 >> 8
                low_byte = rgb565 & 0xFF
                payload.append(high_byte)
                payload.append(low_byte)

            elif bpp == 32:
                # 32bpp not implemented in LameUI yet.
                # This is for future usage
                payload.append(pixel[0])
                payload.append(pixel[1])
                payload.append(pixel[2])

        if (bpp == 1) and (bit_index % 8): #there is something left over in this row (row is not multiple of 8 bits)
            byte = 0
            for bit in bit_list:
                byte = (byte << 1) | bit
            payload.append(byte)

    return (height, width, payload)


def serialize_image_array(name, height, width, payload, bpp):
    print('Serializing image array %s' % name)
    header_output = 'extern const lui_bitmap_t BITMAP_'+name+';\n'
    output = '\nstatic const uint8_t %s_payload[%d] ={\n' % (name, len(payload))
    row = ''
    c = 0
    for byte in payload:
        row += '0x%02X,' % byte
        c += 1
        if c > 30:
            c = 0
            row += '\n'
    row = row[0:-1] #get rid of last comma
    row += '};\n\n'
    output += row
    output += 'const lui_bitmap_t BITMAP_%s = {.size_x=%d, .size_y=%d, .payload=%s_payload, .bpp=%d};\n' % (name, width, height, name, bpp)
    return (header_output, output)

 
#----------------- main -----------------
try:
    in_image_path = sys.argv[1]
    out_dir_path = sys.argv[2]
    bits_per_pixel = int(sys.argv[3])
except Exception:
    print("\nUsage: python lameui_bitmapgen.py <input_image_file> <output_dir> <output_bpp>\n")
    print("<output_bpp> sets bits-per-pixel for the output bitmap:")
    print("     1 (for 1-bit monochrome)")
    print("     8 (for 8-bit Grayscale)")
    print("    16 (for 16-bit RGB565)\n")
    print("Examples: python lameui_bitmapgen.py sunset_hill.jpg out/ 16\n")
    sys.exit(-1)

if not os.path.exists(in_image_path):
    print("ERROR: Input image file does not exist!")
    sys.exit(-1)

if bits_per_pixel not in [1, 8, 16]:
    print("ERROR: Invalid <output_bpp> value! Supported values:")
    print("     1 (for 1-bit monochrome)")
    print("     8 (for 8-bit Grayscale)")
    print("    16 (for 16-bit RGB565)\n")
    sys.exit(-1)

img_name_ext = os.path.basename(in_image_path)
img_name = clean(os.path.splitext(img_name_ext)[0])
img_ext = os.path.splitext(img_name_ext)[1]

output_h_file = open(out_dir_path + '/'+ img_name + '.h', 'w')
output_c_file = open(out_dir_path + '/'+ img_name + '.c', 'w')
 
output_h_file.write('//AUTOGENERATED FILE! DO NOT EDIT!\n')
output_h_file.write('#include "lame_ui.h"\n')
 
output_c_file.write('//AUTOGENERATED FILE! DO NOT EDIT!\n')
output_c_file.write('#include "' + img_name + '.h"\n')
 
 
#serialize images
if img_ext.lower() in [".png", ".jpg", ".jpeg"]:
    file_path = in_image_path
    img_data = Image.open(in_image_path)
    height, width, payload = make_image_array(img_data, bits_per_pixel)
    header, data = serialize_image_array(img_name, height, width, payload, bits_per_pixel)
    output_h_file.write(header)
    output_c_file.write(data)
 
